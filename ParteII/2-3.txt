Algoritmo de Bellman Ford

Este algoritmo visa encontrar o menor caminho de um vértice para todos os outros presentes no grafo, 
e pode ser aplicado em grafos ponderados ou não ponderados.

Grafo:

Vértices: A, B, C, D, E

Primeiro inicializamos a distância de todos os vértices como infinito exceto o vértice de horigem que será 0;

dist[A] = 0
dist[B] = ∞(infinito),
dist[C] = ∞(infinito),
dist[D] = ∞(infinito),
dist[E] = ∞(infinito),

Teremos que fazer N-1 iterações onde N é o número total de vértices no grafo
N-1 = 5-1 = 4

Primeira iteração:

O algoritmo irá pegar a atual distância do primeiro vértice= [B],
Sua distância atual = ∞(infinito),
Será maior = >,
Que a distância de A = 0,
E a distância de A para B = -1,
Somados = 0 - 1 = -1,
Que resultará em = ∞(infinito) > -1 (infinito maios que -1);

Aplicando a regra obtemos os valores:
dist[B] = min(dist[B] > dist[A] + peso(A -> B)) = min(∞, 0 - 1) = -1
dist[C] = min(dist[C] > dist[A] + peso(A -> C)) = min(∞, 0 + 4) = 4

Atualizando a tabela temos:
dist[A] = 0,
dist[B] = -1,
dist[C] = 4,
dist[D] = ∞(infinito),
dist[E] = ∞(infinito),

Segunda Iteração: 

dist[C] = min(dist[C], dist[B] + peso(B -> C)) = min(4, -1 + 3) = 2
dist[D] = min(dist[D], dist[B] + peso(B -> D)) = min(∞, -1 + 2) = 1
dist[E] = min(dist[E], dist[B] + peso(B -> E)) = min(∞, -1 + 2) = 1

Atualizando a tabela temos:

dist[A] = 0,
dist[B] = -1,
dist[C] = 2,
dist[D] = 1,
dist[E] = 1,

Terceira Iteração:

dist[D] = min(dist[D], dist[E] + dist[E -> D]) = min(1, 1 + (-3)) = -2

Atualizando a tabela temos:

dist[A] = 0,
dist[B] = -1,
dist[C] = 2,
dist[D] = -2,
dist[E] = 1,

Quarta Iteração:

dist[B]= min(-1, -2 + 1)= -1
dist[C]= min(2, -2 + 5)= 3

Atualizando a tabela temos:

dist[A] = 0,
dist[B] = -1,
dist[C] = 2,
dist[D] = -2,
dist[E] = 1,

Resumindo o menos caminho de A para os vértices serão:
A -> B = -1 (A,B);
A -> C = 2 (A,B,C);
A -> D = -2 (A,B,E,D);
A -> E = 1 (A,B,E);
